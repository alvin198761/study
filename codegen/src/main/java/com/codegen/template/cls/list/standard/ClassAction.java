package com.codegen.template.cls.list.standard;
import com.codegen.util.CodeUtil;
import com.codegen.util.CommentUtil;
public class ClassAction {
	public static StringBuilder genSB(String packname, String className, String modelName, String author, String CNName, Integer PKey) {
		StringBuilder sb = new StringBuilder();
		String cls = className.toLowerCase();
		sb.append("package " + packname + ".action;");
		sb.append("\r\nimport java.text.SimpleDateFormat;");
		sb.append("\r\nimport java.util.Date;");
		sb.append("\r\nimport java.util.HashMap;");
		sb.append("\r\nimport java.util.Map;");
		sb.append("\r\n");
		sb.append("\r\nimport javax.servlet.http.HttpServletResponse;");
		sb.append("\r\nimport javax.servlet.http.HttpSession;");
		sb.append("\r\n");
		sb.append("\r\nimport org.apache.commons.logging.Log;");
		sb.append("\r\nimport org.apache.commons.logging.LogFactory;");
		sb.append("\r\nimport org.springframework.beans.factory.annotation.Autowired;");
		sb.append("\r\nimport org.springframework.beans.propertyeditors.CustomDateEditor;");
		sb.append("\r\nimport org.springframework.stereotype.Controller;");
		sb.append("\r\nimport org.springframework.validation.BindingResult;");
		sb.append("\r\nimport org.springframework.web.bind.WebDataBinder;");
		sb.append("\r\nimport org.springframework.web.bind.annotation.InitBinder;");
		sb.append("\r\nimport org.springframework.web.bind.annotation.ModelAttribute;");
		sb.append("\r\nimport org.springframework.web.bind.annotation.RequestMapping;");
		sb.append("\r\nimport org.springframework.web.bind.annotation.ResponseBody;");
		sb.append("\r\nimport org.springframework.web.multipart.MultipartFile;");
		sb.append("\r\n");
		sb.append("\r\nimport com.common.util.Util;");
		sb.append("\r\nimport " + packname + ".model." + className + ";");
		sb.append("\r\nimport " + packname + ".model." + className + "Cond;");
		sb.append("\r\nimport " + packname + ".service.I" + className + "Service;");
		sb.append(CommentUtil.classComment(author, CNName + "控制器类"));
		sb.append("\r\n@Controller");
		sb.append("\r\n@RequestMapping(\"/" + cls + "\")");
		sb.append("\r\npublic class " + className + "Action {");
		sb.append("\r\n	private final Log logger = LogFactory.getLog(getClass());");
		sb.append("\r\n	@Autowired");
		sb.append("\r\n	private I" + className + "Service service; // " + CNName + "Service");
		sb.append(CommentUtil.methodComment("跳转到新增页面"));
		sb.append("\r\n	@RequestMapping(\"/toAdd\")");
		sb.append("\r\n	public String toAdd(Map<String, Object> map,@ModelAttribute(\"" + cls + "\")" + className + " " + cls + ", HttpSession session) {");
		sb.append("\r\n\t\tif (Util.getTimeOut(session)) { // 登录过期跳转到登录页或弹出登录窗口");
		sb.append("\r\n\t\t\treturn \"redirect:/user/tologin?msg=1\";");
		sb.append("\r\n\t\t}");
		sb.append("\r\n\t\tlogger.debug(\"用户名:\" + Util.getLoginName(session) + \",登录名:\" + Util.getLoginId(session) + \",用户ID(主键):\" + Util.getUser(session).getId());");
		sb.append("\r\n\t\treturn \"/" + modelName + "/" + cls + "/insert\";");
		sb.append("\r\n\t}");
		sb.append(CommentUtil.methodComment("新增记录"));
		sb.append("\r\n	@RequestMapping(\"/insert\")");
		sb.append("\r\n	public String Add(Map<String, Object> map, @ModelAttribute(\"" + cls + "\") " + className + " " + cls + ", BindingResult result) {");
		sb.append("\r\n		validate(" + cls + ", result, 1);// 调用新增验证方法");
		sb.append("\r\n		if (result.hasErrors()) {");
		sb.append("\r\n			return \"/" + modelName + "/" + cls + "/insert\";");
		sb.append("\r\n		}");
		sb.append("\r\n		service.insert(" + cls + ");");
		sb.append("\r\n		return \"redirect:/" + cls + "/list\";");
		sb.append("\r\n	}");
		sb.append(CommentUtil.methodComment("新增/修改后台验证"));
		sb.append("\r\n	private void validate(" + className + " " + cls + ", BindingResult result, int method) {//method:1新增2修改");
		sb.append("\r\n		//ValidationUtils.rejectIfEmpty(result, \"field01\", \"\", \"字段01不能为空\");");
		sb.append("\r\n		//ValidationUtils.rejectIfEmptyOrWhitespace(result, \"field02\", \"\", \"字段02不能为空或空格\");");
		sb.append("\r\n		" + className + "Cond cond = new " + className + "Cond();");
		sb.append("\r\n		//cond.setId_c(" + cls + ".getField03());");
		sb.append("\r\n\t\tif (method == 2) {");
		sb.append("\r\n\t\t");
		sb.append("\r\n\t\t}");
		sb.append("\r\n		if (service.findCountByCond(cond) > 0) {");
		sb.append("\r\n			//result.rejectValue(\"result\", \"\", \"字段03不能重复!\");");
		sb.append("\r\n		}");
		sb.append("\r\n	}");
		sb.append(CommentUtil.methodComment("删除记录(多条)"));
		sb.append("\r\n	@RequestMapping(\"/delete\")");
		sb.append("\r\n	public String delete(Map<String, Object> map, String id) {");
		sb.append("\r\n		service.delete(id);");
		sb.append("\r\n		return \"redirect:/" + cls + "/list\";");
		sb.append("\r\n	}");
		sb.append(CommentUtil.methodComment("跳转到修改页面"));
		sb.append("\r\n	@RequestMapping(\"/toUpdate\")");
		sb.append("\r\n	public String toUpdate(Map<String, Object> map, " + CodeUtil.keyType(PKey) + " id) {");

		sb.append("\r\n		map.put(\"" + cls + "\",service.findById(id));");
		sb.append("\r\n		return \"/" + modelName + "/" + cls + "/update\";");
		sb.append("\r\n	}");
		sb.append(CommentUtil.methodComment("修改记录"));
		sb.append("\r\n	@RequestMapping(\"/update\")");
		sb.append("\r\n	public String update(Map<String, Object> map, @ModelAttribute(\"" + cls + "\")" + className + " " + cls + ", BindingResult result) {");
		sb.append("\r\n\t\tvalidate(" + cls + ", result, 2);// 调用修改验证方法");
		sb.append("\r\n		if (result.hasErrors()) {");
		sb.append("\r\n			return \"/" + modelName + "/" + cls + "/update\";");
		sb.append("\r\n		}");
		sb.append("\r\n		service.update(" + cls + ");");
		sb.append("\r\n		return \"redirect:/" + cls + "/list\";");
		sb.append("\r\n	}");
		sb.append(CommentUtil.methodComment("按条件查询分页列表页面"));
		sb.append("\r\n	@RequestMapping(\"/list\")");
		sb.append("\r\n	public String queryList(Map<String, Object> map, @ModelAttribute(\"cond\") ");
		sb.append(className + "Cond cond ) {");
		sb.append("\r\n		service.queryList(cond, map);");
		sb.append("\r\n		return \"/" + modelName + "/" + cls + "/list\";");
		sb.append("\r\n	}");
		sb.append(CommentUtil.methodComment("跳转到详细页面"));
		sb.append("\r\n	@RequestMapping(\"/detail\")");
		sb.append("\r\n	public String detail(Map<String, Object> map, " + CodeUtil.keyType(PKey) + " id) {");
		sb.append("\r\n		map.put(\"" + cls + "\",service.findById(id));");
		sb.append("\r\n		return \"/" + modelName + "/" + cls + "/detail\";");
		sb.append("\r\n	}");
		sb.append(CommentUtil.methodComment("日期属性编辑器(新增/修改/查询条件中String自动转换成Date)"));
		sb.append("\r\n	@InitBinder");
		sb.append("\r\n	public void initBinder(WebDataBinder binder) {");
		sb.append("\r\n		SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");");
		sb.append("\r\n		dateFormat.setLenient(false);");
		sb.append("\r\n		binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, true));//true允许为空");
		sb.append("\r\n	}");
		sb.append(CommentUtil.separate());
		sb.append(CommentUtil.methodComment("导出Excel"));
		sb.append("\r\n\t@RequestMapping(\"/export\")");
		sb.append("\r\n\tpublic String exportExcel(@ModelAttribute(\"cond\") " + className + "Cond cond, HttpServletResponse response, HttpSession session) {");
		sb.append("\r\n\t\ttry {");
		sb.append("\r\n\t\t\tString name = null;");
		sb.append("\r\n\t\t\tif (Util.getTimeOut(session)) {");
		sb.append("\r\n\t\t\t\treturn \"redirect:/user/tologin?msg=1\";");
		sb.append("\r\n\t\t\t} else {");
		sb.append("\r\n\t\t\t\tname = Util.getLoginName(session);");
		sb.append("\r\n\t\t\t}");
		sb.append("\r\n\t\t\tservice.exportExcel(cond, response, name);");
		sb.append("\r\n\t\t} catch (Exception e) {");
		sb.append("\r\n\t\t\te.printStackTrace();");
		sb.append("\r\n\t\t\tlogger.error(\"导出" + CNName + "列表时发生异常!\");");
		sb.append("\r\n\t\t}");
		sb.append("\r\n\t\treturn null;");
		sb.append("\r\n\t}");
		sb.append(CommentUtil.methodComment("导入Excel"));
		sb.append("\r\n\t@RequestMapping(\"/import\")");
		sb.append("\r\n\tpublic String importExcel(Map<String, Object> map, MultipartFile file) {");
		sb.append("\r\n\t\ttry {");
		sb.append("\r\n\t\t\tmap.put(\"msg\", service.importExcel(file));");
		sb.append("\r\n\t\t} catch (Exception e) {");
		sb.append("\r\n\t\t\te.printStackTrace();");
		sb.append("\r\n\t\t\tmap.put(\"msg\", \"导入" + CNName + "列表时发生异常,请您核对模版是否正确!\");");
		sb.append("\r\n\t\t\tlogger.error(\"导入" + CNName + "列表时发生异常!\");");
		sb.append("\r\n\t\t}");
		sb.append("\r\n\t\treturn \"/common/importExcel\";");
		sb.append("\r\n\t}");
		sb.append(CommentUtil.methodComment("Json列表(Ajax调用)"));
		sb.append("\r\n\t@RequestMapping(\"/jsonList\")");
		sb.append("\r\n\t//@RequestMapping(\"/jsonList\", produces = \"text/html;charset=UTF-8\")//反回String类型出现乱码解决办法");
		sb.append("\r\n\t@ResponseBody");
		sb.append("\r\n\tpublic Map<String, Object> ajaxJson(@ModelAttribute(\"cond\") " + className + "Cond cond) {");
		sb.append("\r\n\t\t//cond.setItem_id_c(\"字段值\");");
		sb.append("\r\n\t\tMap<String, Object> map = new HashMap<String, Object>();");
		sb.append("\r\n\t\tmap.put(\"jsonData\", service.queryAllObj(cond));");
		sb.append("\r\n\t\treturn map;");
		sb.append("\r\n\t}");
		sb.append(CommentUtil.methodComment("按条件查询分页列表(参照选择页)"));
		sb.append("\r\n	@RequestMapping(\"/ref\")");
		sb.append("\r\n	public String queryRef(Map<String, Object> map, @ModelAttribute(\"cond\") ");
		sb.append(className + "Cond cond ) {");
		sb.append("\r\n		service.queryList(cond, map);");
		sb.append("\r\n		return \"/" + modelName + "/" + cls + "/listRef\";");
		sb.append("\r\n	}");
		sb.append(CommentUtil.methodComment("简单列表;带查询,无增删改,分页可选"));
		sb.append("\r\n\t@RequestMapping(\"/listSimple\")");
		sb.append("\r\n\tpublic String queryListSimple(Map<String, Object> map, @ModelAttribute(\"cond\") ");
		sb.append(className + "Cond cond ) {");
		sb.append("\r\n\t\t//map.put(\"dataList\", service.queryAllMap(cond));//不分页");
		sb.append("\r\n\t\tservice.queryList(cond, map);//分页");
		sb.append("\r\n\t\treturn \"/" + modelName + "/" + cls + "/listSimple\";");
		sb.append("\r\n\t}");	
		sb.append("\r\n}");
		return sb;
	}
}
