package com.codegen.template.cls.tree.simple;

import java.util.List;

import com.codegen.mvc.model.Field;
import com.codegen.util.CodeUtil;
import com.codegen.util.CommentUtil;

public class TreeAction {
	public static StringBuilder genSB(String packname, String className, String modelName, String author, String CNName, List<Field> list) {
		StringBuilder sb = new StringBuilder();
		String cls = className.toLowerCase();
		Field fmap = list.get(0);
		String thisid = fmap.getName().toLowerCase();
		Field fmapn = list.get(1);
		String namefield = fmapn.getName().toLowerCase();
		sb.append("package " + packname + ";");
		sb.append("\r\nimport java.text.SimpleDateFormat;");
		sb.append("\r\nimport java.util.Date;");
		sb.append("\r\nimport java.util.Map;");
		sb.append("\r\nimport java.io.IOException;");
		sb.append("\r\n");
		sb.append("\r\nimport javax.servlet.http.HttpServletRequest;");
		sb.append("\r\nimport javax.servlet.http.HttpServletResponse;");
		sb.append("\r\n");
		sb.append("\r\nimport org.apache.commons.lang.StringUtils;");
		sb.append("\r\nimport org.apache.commons.logging.Log;");
		sb.append("\r\nimport org.apache.commons.logging.LogFactory;");
		sb.append("\r\n");
		sb.append("\r\nimport org.springframework.beans.factory.annotation.Autowired;");
		sb.append("\r\nimport org.springframework.beans.propertyeditors.CustomDateEditor;");
		sb.append("\r\nimport org.springframework.stereotype.Controller;");
		sb.append("\r\nimport org.springframework.validation.BindingResult;");
		sb.append("\r\nimport org.springframework.web.bind.WebDataBinder;");
		sb.append("\r\nimport org.springframework.web.bind.annotation.InitBinder;");
		sb.append("\r\nimport org.springframework.web.bind.annotation.ModelAttribute;");
		sb.append("\r\nimport org.springframework.web.bind.annotation.RequestMapping;");
		sb.append("\r\nimport org.springframework.web.bind.annotation.RequestParam;");
		sb.append("\r\n");
		sb.append("\r\nimport org.dom4j.Document;");
		sb.append("\r\nimport org.dom4j.DocumentHelper;");
		sb.append("\r\nimport org.dom4j.Element;");
		sb.append("\r\n");
		sb.append("\r\nimport com.common.util.Util;");
		sb.append(CommentUtil.classComment(author, CNName + "控制器类"));
		sb.append("\r\n@Controller");
		sb.append("\r\n@RequestMapping(\"/" + cls + "\")");
		sb.append("\r\npublic class " + className + "Action {");
		sb.append("\r\n	private final Log logger = LogFactory.getLog(getClass());");
		sb.append("\r\n	@Autowired");
		sb.append("\r\n	private " + className + "Service service; //" + CNName + "Service");

		sb.append(CommentUtil.methodComment("生成树型XML"));
		sb.append("\r\n	@RequestMapping(\"/tree\")");
		sb.append("\r\n	public void showTree(String id, @RequestParam(required = false) String selectID, @RequestParam(required = false) String type,");
		sb.append("\r\n			HttpServletResponse response) {");
		sb.append("\r\n		Document document = DocumentHelper.createDocument();");
		sb.append("\r\n		Element root = document.addElement(\"tree\");// tree");
		sb.append("\r\n		root.addAttribute(\"id\", \"0\");");
		sb.append("\r\n		Element node = root.addElement(\"item\");// root");
		sb.append("\r\n		" + className + " " + cls + " = service.findById(id);");
		sb.append("\r\n		node.addAttribute(\"id\", id).addAttribute(\"text\", " + cls + ".get" + CodeUtil.firstUpper(namefield)
				+ "()).addAttribute(\"open\", \"1\").addAttribute(\"call\", \"1\").addAttribute(\"select\", \"1\");");
		sb.append("\r\n		if ((\"radio\").equals(type)) {");
		sb.append("\r\n			root.addAttribute(type, \"0\");");
		sb.append("\r\n			node.addAttribute(type, \"0\");");
		sb.append("\r\n		}");
		sb.append("\r\n		" + className + "Cond cond = new " + className + "Cond();");

		sb.append("\r\n		cond.setParent_id_c(id);");
		sb.append("\r\n		//cond.setType_c(ftype);");
		sb.append("\r\n		service.getSonElement(node, type, cond);");

		sb.append("\r\n		if (StringUtils.isNotEmpty(selectID)) {// 反回页面时选中指定结点");
		sb.append("\r\n			Element el = (Element) document.selectSingleNode(\"//item[@id='\" + selectID + \"']\");");
		sb.append("\r\n			el.addAttribute(\"select\", \"1\").addAttribute(\"call\", \"1\");// 指定打开并选中的结点,执行本结点对应的click方法");
		sb.append("\r\n		}");
		sb.append("\r\n		Util.writeXml(response, document);");
		sb.append("\r\n	}");
		sb.append(CommentUtil.methodComment("转到树型展示页面"));
		sb.append("\r\n	@RequestMapping(\"/totree\")");
		sb.append("\r\n	public String toMaintain(@RequestParam(required = false) String id, Map<String, Object> map) {");
		sb.append("\r\n		if (StringUtils.isNotEmpty(id)) {");
		sb.append("\r\n			map.put(\"id\", id);");
		sb.append("\r\n		}");
		sb.append("\r\n\t\treturn \"/" + modelName + "/" + cls + "/tree\";");
		sb.append("\r\n	}");
		sb.append(CommentUtil.methodComment("跳转到新增页面"));
		sb.append("\r\n	@RequestMapping(\"/toAdd\")");
		sb.append("\r\n	public String toAdd(Map<String, Object> map,@ModelAttribute(\"" + cls + "\")" + className + " " + cls + " ,String id) {");
		sb.append("\r\n\t\t" + cls + ".setParent_id(id);");
		sb.append("\r\n\t\t" + cls + ".setIs_leaf(1);");
		sb.append("\r\n\t\treturn \"/" + modelName + "/" + cls + "/insert\";");
		sb.append("\r\n\t}");
		sb.append(CommentUtil.methodComment("新增记录"));
		sb.append("\r\n	@RequestMapping(\"/insert\")");
		sb.append("\r\n	public void Add(Map<String, Object> map, @ModelAttribute(\"" + cls + "\") " + className + " " + cls
				+ ", BindingResult result, HttpServletRequest request,HttpServletResponse response) throws IOException  {");
		sb.append("\r\n		String id = service.insert(" + cls + ");");
		sb.append("\r\n		response.getWriter().append(Util.writeJS(\"/" + cls + "/totree?id=\" + id, request)).flush();");
		sb.append("\r\n	}");
		sb.append(CommentUtil.methodComment("删除记录(多条)"));
		sb.append("\r\n	@RequestMapping(\"/delete\")");
		sb.append("\r\n	public void delete(Map<String, Object> map, String id, HttpServletRequest request, HttpServletResponse response) throws IOException {");
		sb.append("\r\n		String pid = service.delete(id);");
		sb.append("\r\n		response.getWriter().append(Util.writeJS(\"/" + cls + "/totree?id=\" + pid, request)).flush();");
		sb.append("\r\n	}");
		sb.append(CommentUtil.methodComment("跳转到修改页面"));
		sb.append("\r\n	@RequestMapping(\"/toUpdate\")");
		sb.append("\r\n	public String toUpdate(Map<String, Object> map, String id) {");
		sb.append("\r\n		map.put(\"" + cls + "\",service.findById(id));");
		sb.append("\r\n		return \"/" + modelName + "/" + cls + "/update\";");
		sb.append("\r\n	}");
		sb.append(CommentUtil.methodComment("修改记录"));
		sb.append("\r\n	@RequestMapping(\"/update\")");
		sb.append("\r\n	public void update(Map<String, Object> map, @ModelAttribute(\"" + cls + "\")" + className + " " + cls
				+ ", BindingResult result, HttpServletRequest request, HttpServletResponse response) throws IOException  {");
		sb.append("\r\n		String id = " + cls + ".get" + CodeUtil.firstUpper(thisid) + "();");
		sb.append("\r\n		service.update(" + cls + ");");
		sb.append("\r\n		response.getWriter().append(Util.writeJS(\"/" + cls + "/totree?id=\" + id, request)).flush();");
		sb.append("\r\n	}");
		sb.append(CommentUtil.methodComment("跳转到详细页面"));
		sb.append("\r\n	@RequestMapping(\"/detail\")");
		sb.append("\r\n	public String detail(Map<String, Object> map, String id) {");
		sb.append("\r\n		map.put(\"" + cls + "\", service.findById(id));");
		sb.append("\r\n		return \"/" + modelName + "/" + cls + "/detail\";");
		sb.append("\r\n	}");
		sb.append(CommentUtil.methodComment("按条件查询分页列表页面"));
		sb.append("\r\n	@RequestMapping(\"/list\")");
		sb.append("\r\n	public String queryList(Map<String, Object> map, @ModelAttribute(\"cond\") ");
		sb.append(className + "Cond cond,String id) {");
		sb.append("\r\n		cond.setParent_id_c(id);");
		sb.append("\r\n		service.queryList(cond, map);");
		sb.append("\r\n		return \"/" + modelName + "/" + cls + "/list\";");
		sb.append("\r\n	}");
		sb.append(CommentUtil.methodComment("日期属性编辑器(新增/修改/查询条件中String自动转换成Date)"));
		sb.append("\r\n	@InitBinder");
		sb.append("\r\n	public void initBinder(WebDataBinder binder) {");
		sb.append("\r\n		SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");");
		sb.append("\r\n		dateFormat.setLenient(false);");
		sb.append("\r\n		binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, true));//true允许为空");
		sb.append("\r\n	}");
		sb.append(CommentUtil.methodComment("参照选择页"));
		sb.append("\r\n	@RequestMapping(\"/ref\")");
		sb.append("\r\n	public String queryRef(Map<String, Object> map, @ModelAttribute(\"cond\") ");
		sb.append(className + "Cond cond) {");
		sb.append("\r\n		return \"/" + modelName + "/" + cls + "/ref\";");
		sb.append("\r\n	}");
		sb.append(CommentUtil.methodComment("简单列表;带查询,无增删改,分页可选"));
		sb.append("\r\n\t@RequestMapping(\"/listSimple\")");
		sb.append("\r\n\tpublic String queryListSimple(Map<String, Object> map, @ModelAttribute(\"cond\") ");
		sb.append(className + "Cond cond) {");
		sb.append("\r\n\t\tmap.put(\"dataList\", service.queryAllObj(cond));//不分页");
		sb.append("\r\n\t\treturn \"/" + modelName + "/" + cls + "/listSimple\";");
		sb.append("\r\n\t}");
		sb.append("\r\n}");
		return sb;
	}
}
